Thu Feb 18 21:50:17 PST 2021
Linux csslab6.uwb.edu 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
uid=1015102(mikec87) gid=2121015102(mikec87) groups=2121015102(mikec87),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
Level: 4 -- -2147483648 --> 12 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 12 --> 13 --> 15 --> 18 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 5 --> 12 --> 13 --> 15 --> 18 --> 20 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 5 --> 12 --> 13 --> 15 --> 16 --> 18 --> 20 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 3 --> 5 --> 7 --> 9 --> 10 --> 11 --> 12 --> 13 --> 14 --> 15 --> 16 --> 18 --> 19 --> 20 --> 2147483647 --> 

Level: 4 -- -2147483648 --> 12 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 12 --> 15 --> 18 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 5 --> 12 --> 15 --> 18 --> 20 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 5 --> 12 --> 15 --> 16 --> 18 --> 20 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 3 --> 5 --> 7 --> 9 --> 10 --> 11 --> 12 --> 14 --> 15 --> 16 --> 18 --> 19 --> 20 --> 2147483647 --> 

7 ? true
3 ? true
-100 ? false
100 ? false
Level: 4 -- -2147483648 --> 12 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 12 --> 15 --> 18 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 12 --> 15 --> 18 --> 20 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 12 --> 15 --> 16 --> 18 --> 20 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 3 --> 7 --> 9 --> 10 --> 11 --> 12 --> 14 --> 15 --> 16 --> 18 --> 19 --> 20 --> 2147483647 --> 

After adding 38
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 38 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 38 --> 2147483647 --> 

After adding 72
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 38 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 38 --> 72 --> 2147483647 --> 

After adding 21
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 38 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 21 --> 38 --> 72 --> 2147483647 --> 

After adding 25
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 25 --> 38 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 21 --> 25 --> 38 --> 72 --> 2147483647 --> 

After adding 3
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 3 --> 25 --> 38 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 3 --> 21 --> 25 --> 38 --> 72 --> 2147483647 --> 

After adding 1
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 25 --> 38 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 21 --> 25 --> 38 --> 72 --> 2147483647 --> 

After adding 1
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 25 --> 38 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 21 --> 25 --> 38 --> 72 --> 2147483647 --> 

After adding 59
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 25 --> 38 --> 59 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 21 --> 25 --> 38 --> 59 --> 72 --> 2147483647 --> 

After adding 54
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 25 --> 38 --> 59 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 21 --> 25 --> 38 --> 54 --> 59 --> 72 --> 2147483647 --> 

After adding 61
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 25 --> 38 --> 59 --> 61 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 21 --> 25 --> 38 --> 54 --> 59 --> 61 --> 72 --> 2147483647 --> 

After adding 53
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 25 --> 38 --> 53 --> 59 --> 61 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 21 --> 25 --> 38 --> 53 --> 54 --> 59 --> 61 --> 72 --> 2147483647 --> 

After adding 91
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 25 --> 38 --> 53 --> 59 --> 61 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 21 --> 25 --> 38 --> 53 --> 54 --> 59 --> 61 --> 72 --> 91 --> 2147483647 --> 

After adding 10
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 10 --> 25 --> 38 --> 53 --> 59 --> 61 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 10 --> 21 --> 25 --> 38 --> 53 --> 54 --> 59 --> 61 --> 72 --> 91 --> 2147483647 --> 

After adding 13
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 25 --> 38 --> 53 --> 59 --> 61 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 21 --> 25 --> 38 --> 53 --> 54 --> 59 --> 61 --> 72 --> 91 --> 2147483647 --> 

After adding 38
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 25 --> 38 --> 53 --> 59 --> 61 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 21 --> 25 --> 38 --> 53 --> 54 --> 59 --> 61 --> 72 --> 91 --> 2147483647 --> 

After adding 62
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 62 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 62 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 25 --> 38 --> 53 --> 59 --> 61 --> 62 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 21 --> 25 --> 38 --> 53 --> 54 --> 59 --> 61 --> 62 --> 72 --> 91 --> 2147483647 --> 

After adding 42
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 62 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 62 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 25 --> 38 --> 53 --> 59 --> 61 --> 62 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 21 --> 25 --> 38 --> 42 --> 53 --> 54 --> 59 --> 61 --> 62 --> 72 --> 91 --> 2147483647 --> 

After adding 13
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 62 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 62 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 25 --> 38 --> 53 --> 59 --> 61 --> 62 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 21 --> 25 --> 38 --> 42 --> 53 --> 54 --> 59 --> 61 --> 62 --> 72 --> 91 --> 2147483647 --> 

After adding 20
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 62 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 62 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 20 --> 25 --> 38 --> 53 --> 59 --> 61 --> 62 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 20 --> 21 --> 25 --> 38 --> 42 --> 53 --> 54 --> 59 --> 61 --> 62 --> 72 --> 91 --> 2147483647 --> 

After adding 31
Level: 4 -- -2147483648 --> 2147483647 --> 
Level: 3 -- -2147483648 --> 1 --> 62 --> 2147483647 --> 
Level: 2 -- -2147483648 --> 1 --> 31 --> 62 --> 2147483647 --> 
Level: 1 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 20 --> 25 --> 31 --> 38 --> 53 --> 59 --> 61 --> 62 --> 72 --> 2147483647 --> 
Level: 0 -- -2147483648 --> 1 --> 3 --> 10 --> 13 --> 20 --> 21 --> 25 --> 31 --> 38 --> 42 --> 53 --> 54 --> 59 --> 61 --> 62 --> 72 --> 91 --> 2147483647 --> 

Done.
=====================================================
3. clang-tidy warnings are fixed
=====================================================
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./main.cpp
37c37
<   
---
> 
46,52c46,52
<     SkipList s(5);
<     for (int i = 0; i < 20; ++i) {
<         int number = rand() % 100;
<         s.add(number);
<         cout << "After adding " << number << endl;
<         cout << s << endl;
<     }
---
>   SkipList s(5);
>   for (int i = 0; i < 20; ++i) {
>     int number = rand() % 100;
>     s.add(number);
>     cout << "After adding " << number << endl;
>     cout << s << endl;
>   }
56c56
< //test
---
>   // test
Running clang-format on ./skiplist.cpp
16,18c16,18
<     SNode* curr = skip.frontGuard[i];
<     while(curr != nullptr) {
<       out << to_string(curr->value) + " --> ";    
---
>     SNode *curr = skip.frontGuard[i];
>     while (curr != nullptr) {
>       out << to_string(curr->value) + " --> ";
26,27c26,27
< SNode::SNode(int value) : value{value}, next{nullptr}, prev{nullptr}, 
< up{nullptr}, down{nullptr} {}
---
> SNode::SNode(int value)
>     : value{value}, next{nullptr}, prev{nullptr}, up{nullptr}, down{nullptr} {}
37c37
<   for(int i = 0; i < maxLevel; i++) {
---
>   for (int i = 0; i < maxLevel; i++) {
44,48c44,48
<   for(int i = 0; i < maxLevel-1; i++) {
<     frontGuard[i]->up = frontGuard[i+1];
<     frontGuard[i+1]->down = frontGuard[i];
<     rearGuard[i]->up = rearGuard[i+1];
<     rearGuard[i+1]->down = rearGuard[i];
---
>   for (int i = 0; i < maxLevel - 1; i++) {
>     frontGuard[i]->up = frontGuard[i + 1];
>     frontGuard[i + 1]->down = frontGuard[i];
>     rearGuard[i]->up = rearGuard[i + 1];
>     rearGuard[i + 1]->down = rearGuard[i];
56,57c56,57
< bool SkipList::add(int value) { 
<   if(contains(value)) {
---
> bool SkipList::add(int value) {
>   if (contains(value)) {
70c70
<   while(curr->value < value && curr->next != nullptr) {
---
>   while (curr->value < value && curr->next != nullptr) {
75,78c75,78
<     if(shouldInsertAtHigher() && level < maxLevel) {
<       addAtLevel(value, level);
<       connectBelow(newNode, level);
<     }
---
>   if (shouldInsertAtHigher() && level < maxLevel) {
>     addAtLevel(value, level);
>     connectBelow(newNode, level);
>   }
82,86c82,86
<     prev = curr->prev; 
<     prev->next = newNode;
<     newNode->prev = prev;
<     newNode->next = curr;
<     curr->prev = newNode;   
---
>   prev = curr->prev;
>   prev->next = newNode;
>   newNode->prev = prev;
>   newNode->next = curr;
>   curr->prev = newNode;
91,92c91,92
<   while(currBelow != nullptr) {
<     if(currBelow->value == node->value) {
---
>   while (currBelow != nullptr) {
>     if (currBelow->value == node->value) {
100,102c100
< SkipList::~SkipList() {
<   clear();
< }
---
> SkipList::~SkipList() { clear(); }
106c104
<   for(int i = maxLevel - 1; i >= 0; i--) {
---
>   for (int i = maxLevel - 1; i >= 0; i--) {
108c106
<     while(curr->next != nullptr) {
---
>     while (curr->next != nullptr) {
115c113
<   }  
---
>   }
120,121c118,119
< bool SkipList::remove(int data) { 
<   if(!contains(data)) {
---
> bool SkipList::remove(int data) {
>   if (!contains(data)) {
125c123
<   for(int i = 0; i < maxLevel; i++) {
---
>   for (int i = 0; i < maxLevel; i++) {
127c125
<     while(curr->next != nullptr) {
---
>     while (curr->next != nullptr) {
129c127
<       if(curr->value == data) {
---
>       if (curr->value == data) {
138c136
< return true; 
---
>   return true;
141c139
< bool SkipList::contains(int data) const { 
---
> bool SkipList::contains(int data) const {
143c141
<   for(int i = maxLevel - 1; i >=0; i--) {
---
>   for (int i = maxLevel - 1; i >= 0; i--) {
145c143
<     while(curr != nullptr && curr->value < data) {
---
>     while (curr != nullptr && curr->value < data) {
147c145
<       if(curr->value == data) {
---
>       if (curr->value == data) {
152c150
<   return false; 
---
>   return false;
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==30131== Memcheck, a memory error detector
==30131== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==30131== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==30131== Command: ./a.out
==30131== Parent PID: 30075
==30131== 
==30131== 
==30131== HEAP SUMMARY:
==30131==     in use at exit: 0 bytes in 0 blocks
==30131==   total heap usage: 207 allocs, 207 frees, 79,909 bytes allocated
==30131== 
==30131== All heap blocks were freed -- no leaks are possible
==30131== 
==30131== For lists of detected and suppressed errors, rerun with: -s
==30131== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/mikec87/C++/CSS342/ass4-skiplist/main.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------
test1()                           1       0 100.00%        36       0 100.00%
test04()                          4       0 100.00%         9       0 100.00%
main                              1       0 100.00%         8       0 100.00%
-----------------------------------------------------------------------------
TOTAL                             6       0 100.00%        53       0 100.00%

File '/home/NETID/mikec87/C++/CSS342/ass4-skiplist/skiplist.cpp':
Name                                               Regions    Miss   Cover     Lines    Miss   Cover
----------------------------------------------------------------------------------------------------
operator<<(std::ostream&, SkipList const&)               6       0 100.00%        12       0 100.00%
SNode::SNode(int)                                        1       0 100.00%         1       0 100.00%
SkipList::SkipList(int, int)                             7       0 100.00%        21       0 100.00%
SkipList::shouldInsertAtHigher() const                   1       0 100.00%         3       0 100.00%
SkipList::add(int)                                       4       0 100.00%         8       0 100.00%
SkipList::addAtLevel(int, int)                           9       0 100.00%        15       0 100.00%
SkipList::connectAtLevel(SNode*, SNode*, SNode*)         1       0 100.00%         7       0 100.00%
SkipList::connectBelow(SNode*, int)                      5       0 100.00%        10       0 100.00%
SkipList::~SkipList()                                    1       0 100.00%         3       0 100.00%
SkipList::clear()                                        6       0 100.00%        15       0 100.00%
SkipList::remove(int)                                   11       0 100.00%        20       0 100.00%
SkipList::contains(int) const                           11       0 100.00%        13       0 100.00%
----------------------------------------------------------------------------------------------------
TOTAL                                                   63       0 100.00%       128       0 100.00%
/home/NETID/mikec87/C++/CSS342/ass4-skiplist/main.cpp:
    1|       |#include <cassert>
    2|       |#include <iostream>
    3|       |
    4|       |#include "skiplist.h"
    5|       |
    6|       |using namespace std;
    7|       |
    8|      1|void test1() {
    9|      1|  // setting seed for easy testing
   10|      1|  srand(10000);
   11|      1|  SkipList skp(5, 50);
   12|      1|  cout << boolalpha;
   13|      1|  skp.add(3);
   14|      1|  skp.add(10);
   15|      1|  skp.add(5);
   16|      1|  skp.add(7);
   17|      1|  skp.add(9);
   18|      1|  skp.add(11);
   19|      1|  skp.add(12);
   20|      1|  skp.add(13);
   21|      1|  skp.add(14);
   22|      1|  skp.add(15);
   23|      1|  skp.add(16);
   24|      1|  skp.add(18);
   25|      1|  skp.add(19);
   26|      1|  skp.add(20);
   27|      1|  cout << skp << endl;
   28|      1|  skp.remove(13);
   29|      1|  // skp.add(vector<int>{1, 7, 9});
   30|      1|  // // cannot add existing
   31|      1|  // assert(!skp.add(vector<int>{1, 7}));
   32|      1|  cout << skp << endl;
   33|      1|  cout << "7 ? " << skp.contains(7) << endl;
   34|      1|  cout << "3 ? " << skp.contains(3) << endl;
   35|      1|  cout << "-100 ? " << skp.contains(-100) << endl;
   36|      1|  cout << "100 ? " << skp.contains(100) << endl;
   37|      1|  
   38|      1|  bool result = skp.remove(5);
   39|      1|  assert(result);
   40|      1|  result = skp.remove(5);
   41|      1|  assert(!result);
   42|      1|  cout << skp << endl;
   43|      1|}
   44|       |
   45|      1|void test04() {
   46|      1|    SkipList s(5);
   47|     21|    for (int i = 0; i < 20; ++i) {
   48|     20|        int number = rand() % 100;
   49|     20|        s.add(number);
   50|     20|        cout << "After adding " << number << endl;
   51|     20|        cout << s << endl;
   52|     20|    }
   53|      1|}
   54|       |
   55|      1|int main() {
   56|      1|//test
   57|      1|  test1();
   58|      1|  test04();
   59|      1|
   60|      1|  cout << "Done." << endl;
   61|      1|  return 0;
   62|      1|}

/home/NETID/mikec87/C++/CSS342/ass4-skiplist/skiplist.cpp:
    1|       |
    2|       |//
    3|       |
    4|       |#include <cassert>
    5|       |#include <climits>
    6|       |#include <cstdlib>
    7|       |#include <iostream>
    8|       |
    9|       |#include "skiplist.h"
   10|       |
   11|       |using namespace std;
   12|       |
   13|     23|ostream &operator<<(ostream &out, const SkipList &skip) {
   14|    138|  for (int i = skip.maxLevel - 1; i >= 0; i--) {
   15|    115|    out << "Level: " + to_string(i) + " -- ";
   16|    115|    SNode* curr = skip.frontGuard[i];
   17|    802|    while(curr != nullptr) {
   18|    687|      out << to_string(curr->value) + " --> ";    
   19|    687|      curr = curr->next;
   20|    687|    }
   21|    115|    out << "\n";
   22|    115|  }
   23|     23|  return out;
   24|     23|}
   25|       |
   26|       |SNode::SNode(int value) : value{value}, next{nullptr}, prev{nullptr}, 
   27|     87|up{nullptr}, down{nullptr} {}
   28|       |
   29|       |SkipList::SkipList(int maxLevel, int probability)
   30|      2|    : maxLevel{maxLevel}, probability{probability} {
   31|      2|  assert(maxLevel > 0 && probability >= 0 && probability < 100);
   32|      2|  // dynamically allocate frontGuards and rearGuards arrays
   33|      2|  // test comment
   34|      2|  frontGuard = new SNode *[maxLevel];
   35|      2|  rearGuard = new SNode *[maxLevel];
   36|      2|
   37|     12|  for(int i = 0; i < maxLevel; i++) {
   38|     10|    frontGuard[i] = new SNode(INT_MIN);
   39|     10|    rearGuard[i] = new SNode(INT_MAX);
   40|     10|    frontGuard[i]->next = rearGuard[i];
   41|     10|    rearGuard[i]->prev = frontGuard[i];
   42|     10|  }
   43|      2|
   44|     10|  for(int i = 0; i < maxLevel-1; i++) {
   45|      8|    frontGuard[i]->up = frontGuard[i+1];
   46|      8|    frontGuard[i+1]->down = frontGuard[i];
   47|      8|    rearGuard[i]->up = rearGuard[i+1];
   48|      8|    rearGuard[i+1]->down = rearGuard[i];
   49|      8|  }
   50|      2|}
   51|       |
   52|     67|bool SkipList::shouldInsertAtHigher() const {
   53|     67|  return rand() % 100 < probability;
   54|     67|}
   55|       |
   56|     34|bool SkipList::add(int value) { 
   57|     34|  if(contains(value)) {
   58|      3|    return false;
   59|      3|  }
   60|     31|  int level = 0;
   61|     31|  addAtLevel(value, level);
   62|     31|  return true;
   63|     31|}
   64|       |
   65|     67|void SkipList::addAtLevel(int value, int level) {
   66|     67|  SNode *newNode = new SNode(value);
   67|     67|  SNode *curr = frontGuard[level];
   68|     67|  SNode *prev = frontGuard[level];
   69|     67|
   70|    373|  while(curr->value < value && curr->next != nullptr) {
   71|    306|    curr = curr->next;
   72|    306|  }
   73|     67|  connectAtLevel(prev, curr, newNode);
   74|     67|  level++;
   75|     67|    if(shouldInsertAtHigher() && level < maxLevel) {
   76|     36|      addAtLevel(value, level);
   77|     36|      connectBelow(newNode, level);
   78|     36|    }
   79|     67|}
   80|       |
   81|     67|void SkipList::connectAtLevel(SNode *prev, SNode *curr, SNode *newNode) {
   82|     67|    prev = curr->prev; 
   83|     67|    prev->next = newNode;
   84|     67|    newNode->prev = prev;
   85|     67|    newNode->next = curr;
   86|     67|    curr->prev = newNode;   
   87|     67|}
   88|       |
   89|     36|void SkipList::connectBelow(SNode *node, int level) {
   90|     36|  SNode *currBelow = frontGuard[level - 1];
   91|    359|  while(currBelow != nullptr) {
   92|    323|    if(currBelow->value == node->value) {
   93|     36|      node->up = currBelow;
   94|     36|      currBelow->down = node;
   95|     36|    }
   96|    323|    currBelow = currBelow->next;
   97|    323|  }
   98|     36|}
   99|       |
  100|      2|SkipList::~SkipList() {
  101|      2|  clear();
  102|      2|}
  103|       |
  104|      2|void SkipList::clear() {
  105|      2|  SNode *curr;
  106|     12|  for(int i = maxLevel - 1; i >= 0; i--) {
  107|     10|    curr = frontGuard[i];
  108|     80|    while(curr->next != nullptr) {
  109|     70|      curr = curr->next;
  110|     70|      delete curr->prev;
  111|     70|      curr->prev = nullptr;
  112|     70|    }
  113|     10|    delete curr;
  114|     10|    curr = nullptr;
  115|     10|  }  
  116|      2|  delete[] frontGuard;
  117|      2|  delete[] rearGuard;
  118|      2|}
  119|       |
  120|      3|bool SkipList::remove(int data) { 
  121|      3|  if(!contains(data)) {
  122|      1|    return false;
  123|      1|  }
  124|      2|  SNode *curr;
  125|     12|  for(int i = 0; i < maxLevel; i++) {
  126|     10|    curr = frontGuard[i];
  127|     31|    while(curr->next != nullptr) {
  128|     28|      curr = curr->next;
  129|     28|      if(curr->value == data) {
  130|      7|        curr->prev->next = curr->next;
  131|      7|        curr->next->prev = curr->prev;
  132|      7|        delete curr;
  133|      7|        break;
  134|      7|      }
  135|     28|    }
  136|     10|  }
  137|      2|  curr = nullptr;
  138|      2|return true; 
  139|      2|}
  140|       |
  141|     41|bool SkipList::contains(int data) const { 
  142|     41|  SNode *curr;
  143|    229|  for(int i = maxLevel - 1; i >=0; i--) {
  144|    195|    curr = frontGuard[i];
  145|    753|    while(curr != nullptr && curr->value < data) {
  146|    565|      curr = curr->next;
  147|    565|      if(curr->value == data) {
  148|      7|        return true;
  149|      7|      }
  150|    565|    }
  151|    195|  }
  152|     41|  return false; 
  153|     41|}

Thu Feb 18 21:50:27 PST 2021
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
