Fri Feb 19 19:10:37 PST 2021
Linux csslab6.uwb.edu 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
uid=1015102(mikec87) gid=2121015102(mikec87) groups=2121015102(mikec87),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
Level: 4 -- -2147483648, 2, 13, 2147483647, 
Level: 3 -- -2147483648, 2, 13, 33, 2147483647, 
Level: 2 -- -2147483648, 2, 5, 13, 33, 2147483647, 
Level: 1 -- -2147483648, 2, 3, 5, 13, 17, 33, 2147483647, 
Level: 0 -- -2147483648, 2, 3, 5, 9, 13, 17, 33, 2147483647, 

7 ? false
3 ? true
-100 ? false
100 ? false
Level: 4 -- -2147483648, 2, 13, 2147483647, 
Level: 3 -- -2147483648, 2, 13, 33, 2147483647, 
Level: 2 -- -2147483648, 2, 13, 33, 2147483647, 
Level: 1 -- -2147483648, 2, 3, 13, 17, 33, 2147483647, 
Level: 0 -- -2147483648, 2, 3, 9, 13, 17, 33, 2147483647, 

After adding 12
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 2147483647, 
Level: 1 -- -2147483648, 2147483647, 
Level: 0 -- -2147483648, 12, 2147483647, 

After adding 42
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 2147483647, 
Level: 1 -- -2147483648, 42, 2147483647, 
Level: 0 -- -2147483648, 12, 42, 2147483647, 

After adding 66
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 42, 66, 2147483647, 
Level: 0 -- -2147483648, 12, 42, 66, 2147483647, 

After adding 38
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 38, 42, 66, 2147483647, 
Level: 0 -- -2147483648, 12, 38, 42, 66, 2147483647, 

After adding 72
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 12, 38, 42, 66, 72, 2147483647, 

After adding 21
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 12, 21, 38, 42, 66, 72, 2147483647, 

After adding 25
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 25, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 12, 21, 25, 38, 42, 66, 72, 2147483647, 

After adding 3
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 3, 25, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 3, 12, 21, 25, 38, 42, 66, 72, 2147483647, 

After adding 1
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 66, 72, 2147483647, 

After adding 1
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 66, 72, 2147483647, 

After adding 59
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 59, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 59, 66, 72, 2147483647, 

After adding 54
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 59, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 54, 59, 66, 72, 2147483647, 

After adding 61
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 54, 59, 61, 66, 72, 2147483647, 

After adding 53
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 53, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 53, 54, 59, 61, 66, 72, 2147483647, 

After adding 91
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 53, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 53, 54, 59, 61, 66, 72, 91, 2147483647, 

After adding 10
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 25, 38, 42, 53, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 21, 25, 38, 42, 53, 54, 59, 61, 66, 72, 91, 2147483647, 

After adding 13
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 38, 42, 53, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 38, 42, 53, 54, 59, 61, 66, 72, 91, 2147483647, 

After adding 38
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 38, 42, 53, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 38, 42, 53, 54, 59, 61, 66, 72, 91, 2147483647, 

After adding 62
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 62, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 38, 42, 53, 59, 61, 62, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 38, 42, 53, 54, 59, 61, 62, 66, 72, 91, 2147483647, 

After adding 42
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 62, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 38, 42, 53, 59, 61, 62, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 38, 42, 53, 54, 59, 61, 62, 66, 72, 91, 2147483647, 

After adding 94
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 38, 42, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 38, 42, 53, 54, 59, 61, 62, 66, 72, 91, 94, 2147483647, 

After adding 31
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 31, 38, 42, 53, 54, 59, 61, 62, 66, 72, 91, 94, 2147483647, 

After adding 52
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 31, 38, 42, 52, 53, 54, 59, 61, 62, 66, 72, 91, 94, 2147483647, 

After adding 39
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 31, 38, 39, 42, 52, 53, 54, 59, 61, 62, 66, 72, 91, 94, 2147483647, 

After adding 97
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 31, 38, 39, 42, 52, 53, 54, 59, 61, 62, 66, 72, 91, 94, 97, 2147483647, 

After adding 32
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 52, 53, 54, 59, 61, 62, 66, 72, 91, 94, 97, 2147483647, 

After adding 66
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 52, 53, 54, 59, 61, 62, 66, 72, 91, 94, 97, 2147483647, 

After adding 48
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 59, 61, 62, 66, 72, 91, 94, 97, 2147483647, 

After adding 79
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 59, 61, 62, 66, 72, 79, 91, 94, 97, 2147483647, 

After adding 77
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 59, 61, 62, 66, 72, 77, 79, 91, 94, 97, 2147483647, 

After adding 98
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 59, 61, 62, 66, 72, 77, 79, 91, 94, 97, 98, 2147483647, 

After adding 10
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 59, 61, 62, 66, 72, 77, 79, 91, 94, 97, 98, 2147483647, 

After adding 2
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 2, 3, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 59, 61, 62, 66, 72, 77, 79, 91, 94, 97, 98, 2147483647, 

After adding 5
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 5, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 5, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 2, 3, 5, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 59, 61, 62, 66, 72, 77, 79, 91, 94, 97, 98, 2147483647, 

After adding 55
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 5, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 5, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 2, 3, 5, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 55, 59, 61, 62, 66, 72, 77, 79, 91, 94, 97, 98, 2147483647, 

After adding 8
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 5, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 5, 8, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 2, 3, 5, 8, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 55, 59, 61, 62, 66, 72, 77, 79, 91, 94, 97, 98, 2147483647, 

After adding 94
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 5, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 5, 8, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 2, 3, 5, 8, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 55, 59, 61, 62, 66, 72, 77, 79, 91, 94, 97, 98, 2147483647, 

After adding 90
Level: 4 -- -2147483648, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 5, 31, 42, 62, 66, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 5, 8, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 90, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 2, 3, 5, 8, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 55, 59, 61, 62, 66, 72, 77, 79, 90, 91, 94, 97, 98, 2147483647, 

After adding 81
Level: 4 -- -2147483648, 81, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 81, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 5, 31, 42, 62, 66, 81, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 5, 8, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 81, 90, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 2, 3, 5, 8, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 55, 59, 61, 62, 66, 72, 77, 79, 81, 90, 91, 94, 97, 98, 2147483647, 

After adding 4
Level: 4 -- -2147483648, 81, 2147483647, 
Level: 3 -- -2147483648, 1, 62, 81, 94, 2147483647, 
Level: 2 -- -2147483648, 1, 5, 31, 42, 62, 66, 81, 94, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 5, 8, 10, 13, 25, 31, 38, 42, 52, 53, 59, 61, 62, 66, 72, 81, 90, 94, 2147483647, 
Level: 0 -- -2147483648, 1, 2, 3, 4, 5, 8, 10, 12, 13, 21, 25, 31, 32, 38, 39, 42, 48, 52, 53, 54, 55, 59, 61, 62, 66, 72, 77, 79, 81, 90, 91, 94, 97, 98, 2147483647, 

Level: 4 -- -2147483648, 3, 9, 18, 25, 27, 33, 35, 36, 37, 45, 46, 49, 54, 73, 75, 84, 90, 92, 93, 2147483647, 
Level: 3 -- -2147483648, 3, 9, 18, 25, 27, 33, 35, 36, 37, 45, 46, 49, 54, 73, 75, 84, 90, 92, 93, 2147483647, 
Level: 2 -- -2147483648, 3, 9, 18, 25, 27, 33, 35, 36, 37, 45, 46, 49, 54, 73, 75, 84, 90, 92, 93, 2147483647, 
Level: 1 -- -2147483648, 3, 9, 18, 25, 27, 33, 35, 36, 37, 45, 46, 49, 54, 73, 75, 84, 90, 92, 93, 2147483647, 
Level: 0 -- -2147483648, 3, 9, 18, 25, 27, 33, 35, 36, 37, 45, 46, 49, 54, 73, 75, 84, 90, 92, 93, 2147483647, 

Level: 0 -- -2147483648, 3, 6, 13, 15, 21, 22, 31, 35, 38, 46, 48, 49, 51, 53, 69, 72, 77, 79, 83, 85, 2147483647, 

Done.
=====================================================
3. clang-tidy warnings are fixed
=====================================================
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./ass4.cpp
3c3
<  * 
---
>  *
7,8c7
< 
< 
---
> #include "skiplist.h"
11d9
< #include "skiplist.h"
47c45
<    for (int i = 0; i < 40; ++i) {
---
>   for (int i = 0; i < 40; ++i) {
59c57
< add the same value at every depth level because of 100% 
---
> add the same value at every depth level because of 100%
62,63c60,61
<   SkipList s(5,100);
<    for (int i = 0; i < 20; ++i) {
---
>   SkipList s(5, 100);
>   for (int i = 0; i < 20; ++i) {
71c69
< level and probability (1, 50). 20 numbers are randomly 
---
> level and probability (1, 50). 20 numbers are randomly
75c73
<    for (int i = 0; i < 20; ++i) {
---
>   for (int i = 0; i < 20; ++i) {
Running clang-format on ./skiplist.cpp
3c3
<  * 
---
>  *
9a10
> #include "skiplist.h"
14d14
< #include "skiplist.h"
24,26c24,26
<     SNode* curr = skip.frontGuard[i];
<     while(curr != nullptr) {
<       out << to_string(curr->value) + ", ";    
---
>     SNode *curr = skip.frontGuard[i];
>     while (curr != nullptr) {
>       out << to_string(curr->value) + ", ";
38,39c38,39
< SNode::SNode(int value) : value{value}, next{nullptr}, prev{nullptr}, 
< up{nullptr}, down{nullptr} {}
---
> SNode::SNode(int value)
>     : value{value}, next{nullptr}, prev{nullptr}, up{nullptr}, down{nullptr} {}
42c42
< for the pointers. Sets the front and rear of each level array to 
---
> for the pointers. Sets the front and rear of each level array to
59c59
<   for(int i = 0; i < maxLevel; i++) {
---
>   for (int i = 0; i < maxLevel; i++) {
67,71c67,71
<   for(int i = 0; i < maxLevel-1; i++) {
<     frontGuard[i]->up = frontGuard[i+1];
<     frontGuard[i+1]->down = frontGuard[i];
<     rearGuard[i]->up = rearGuard[i+1];
<     rearGuard[i+1]->down = rearGuard[i];
---
>   for (int i = 0; i < maxLevel - 1; i++) {
>     frontGuard[i]->up = frontGuard[i + 1];
>     frontGuard[i + 1]->down = frontGuard[i];
>     rearGuard[i]->up = rearGuard[i + 1];
>     rearGuard[i + 1]->down = rearGuard[i];
78,80c78
< SkipList::~SkipList() {
<   clear();
< }
---
> SkipList::~SkipList() { clear(); }
89c87
<   for(int i = maxLevel - 1; i >= 0; i--) {
---
>   for (int i = maxLevel - 1; i >= 0; i--) {
91c89
<     while(curr->next != nullptr) {
---
>     while (curr->next != nullptr) {
98c96
<   }  
---
>   }
114,115c112,113
< bool SkipList::add(int value) { 
<   if(contains(value)) {
---
> bool SkipList::add(int value) {
>   if (contains(value)) {
124c122
< at a specified level. This method recursively calls itself to add at higher 
---
> at a specified level. This method recursively calls itself to add at higher
133c131
<   while(curr->value < value && curr->next != nullptr) {
---
>   while (curr->value < value && curr->next != nullptr) {
137c135
<   // When the correct position in the list is found, calls addBefore 
---
>   // When the correct position in the list is found, calls addBefore
141c139
<   assert (newNode->prev != nullptr && newNode->prev->value < newNode->value);
---
>   assert(newNode->prev != nullptr && newNode->prev->value < newNode->value);
144,148c142,146
<     // Check whether to increase depth of skiplist.
<     if(shouldInsertAtHigher() && level < maxLevel) {
<       addAtLevel(value, level);
<       connectLevels(newNode, level);
<     }
---
>   // Check whether to increase depth of skiplist.
>   if (shouldInsertAtHigher() && level < maxLevel) {
>     addAtLevel(value, level);
>     connectLevels(newNode, level);
>   }
151,153c149,151
< /** Method that links nodes in correct order horizontally when adding a new value.
< Precondition: SkipList object must exist.
< Postcondition: Inserts a node before the current node. */
---
> /** Method that links nodes in correct order horizontally when adding a new
> value. Precondition: SkipList object must exist. Postcondition: Inserts a node
> before the current node. */
159c157
<   curr->prev = newNode;   
---
>   curr->prev = newNode;
162,165c160,163
< /** Method that connects levels vertically. Creates a node below the current level
< that finds the same value and connects the two levels.
< Precondition: SkipList object must exist. Value must exit on both levels.
< Postcondition: Connects node below with node above.*/
---
> /** Method that connects levels vertically. Creates a node below the current
> level that finds the same value and connects the two levels. Precondition:
> SkipList object must exist. Value must exit on both levels. Postcondition:
> Connects node below with node above.*/
168,169c166,167
<   while(nodeBelow != nullptr) {
<     if(nodeBelow->value == node->value) {
---
>   while (nodeBelow != nullptr) {
>     if (nodeBelow->value == node->value) {
178,185c176,182
< /** Method that removes a single value throughout the skiplist. Uses the contains
< method to check whether the value exists in the list. Then, goes through each 
< level and deletes the node with the specified value data. Also, deletes the pointer
< and sets to nullptr.
< Precondition: SkipList object must exist.
< Postcondition: Returns true removed successfully.*/
< bool SkipList::remove(int data) { 
<   if(!contains(data)) {
---
> /** Method that removes a single value throughout the skiplist. Uses the
> contains method to check whether the value exists in the list. Then, goes
> through each level and deletes the node with the specified value data. Also,
> deletes the pointer and sets to nullptr. Precondition: SkipList object must
> exist. Postcondition: Returns true removed successfully.*/
> bool SkipList::remove(int data) {
>   if (!contains(data)) {
189c186
<   for(int i = 0; i < maxLevel; i++) {
---
>   for (int i = 0; i < maxLevel; i++) {
191c188
<     while(curr->next != nullptr) {
---
>     while (curr->next != nullptr) {
193c190
<       if(curr->value == data) {
---
>       if (curr->value == data) {
202c199
< return true; 
---
>   return true;
205,208c202,204
< /** Boolean method that checks whether a particular value exists within the list.
< Method searches throughout the list with the order of logN by going from highest
< level of the list down. 
< Precondition: SkipList object must exist.
---
> /** Boolean method that checks whether a particular value exists within the
> list. Method searches throughout the list with the order of logN by going from
> highest level of the list down. Precondition: SkipList object must exist.
210c206
< bool SkipList::contains(int data) const { 
---
> bool SkipList::contains(int data) const {
212c208
<   for(int i = maxLevel - 1; i >=0; i--) {
---
>   for (int i = maxLevel - 1; i >= 0; i--) {
214c210
<     while(curr != nullptr && curr->value < data) {
---
>     while (curr != nullptr && curr->value < data) {
216c212
<       if(curr->value == data) {
---
>       if (curr->value == data) {
221c217
<   return false; 
---
>   return false;
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==4522== Memcheck, a memory error detector
==4522== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==4522== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==4522== Command: ./a.out
==4522== Parent PID: 4392
==4522== 
==4522== 
==4522== HEAP SUMMARY:
==4522==     in use at exit: 0 bytes in 0 blocks
==4522==   total heap usage: 245 allocs, 245 frees, 82,400 bytes allocated
==4522== 
==4522== All heap blocks were freed -- no leaks are possible
==4522== 
==4522== For lists of detected and suppressed errors, rerun with: -s
==4522== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/mikec87/C++/CSS342/ass4-skiplist/ass4.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------
test1()                           1       0 100.00%        22       0 100.00%
test2()                           4       0 100.00%         9       0 100.00%
test3()                           4       0 100.00%         8       0 100.00%
test4()                           4       0 100.00%         8       0 100.00%
main                              1       0 100.00%         8       0 100.00%
-----------------------------------------------------------------------------
TOTAL                            14       0 100.00%        55       0 100.00%

File '/home/NETID/mikec87/C++/CSS342/ass4-skiplist/skiplist.cpp':
Name                                         Regions    Miss   Cover     Lines    Miss   Cover
----------------------------------------------------------------------------------------------
operator<<(std::ostream&, SkipList const&)         6       0 100.00%        12       0 100.00%
SNode::SNode(int)                                  1       0 100.00%         1       0 100.00%
SkipList::SkipList(int, int)                       7       0 100.00%        26       0 100.00%
SkipList::~SkipList()                              1       0 100.00%         3       0 100.00%
SkipList::clear()                                  6       0 100.00%        15       0 100.00%
SkipList::shouldInsertAtHigher() const             1       0 100.00%         3       0 100.00%
SkipList::add(int)                                 4       0 100.00%         8       0 100.00%
SkipList::addAtLevel(int, int)                     9       0 100.00%        22       0 100.00%
SkipList::addBefore(SNode*, SNode*)                1       0 100.00%         7       0 100.00%
SkipList::connectLevels(SNode*, int)               6       0 100.00%        11       0 100.00%
SkipList::remove(int)                             11       0 100.00%        20       0 100.00%
SkipList::contains(int) const                     11       0 100.00%        13       0 100.00%
----------------------------------------------------------------------------------------------
TOTAL                                             64       0 100.00%       141       0 100.00%
/home/NETID/mikec87/C++/CSS342/ass4-skiplist/ass4.cpp:
    1|       |/** Michael Cho 2/19/21
    2|       | * CSS342
    3|       | * 
    4|       | * This is the main driver file. It is running assertion tests.
    5|       | * */
    6|       |
    7|       |
    8|       |
    9|       |#include <cassert>
   10|       |#include <iostream>
   11|       |#include "skiplist.h"
   12|       |
   13|       |using namespace std;
   14|       |
   15|       |/** Test. Creates a SkipList object skp with 5 levels
   16|       |and 80 percent probability. Adds various values into
   17|       |the skiplist and checks the contains and remove methods. */
   18|      1|void test1() {
   19|      1|  srand(10000);
   20|      1|  SkipList skp(5, 80);
   21|      1|  cout << boolalpha;
   22|      1|  skp.add(3);
   23|      1|  skp.add(5);
   24|      1|  skp.add(9);
   25|      1|  skp.add(17);
   26|      1|  skp.add(13);
   27|      1|  skp.add(33);
   28|      1|  skp.add(2);
   29|      1|  cout << skp << endl;
   30|      1|  cout << "7 ? " << skp.contains(7) << endl;
   31|      1|  cout << "3 ? " << skp.contains(3) << endl;
   32|      1|  cout << "-100 ? " << skp.contains(-100) << endl;
   33|      1|  cout << "100 ? " << skp.contains(100) << endl;
   34|      1|  bool result = skp.remove(5);
   35|      1|  assert(result);
   36|      1|  result = skp.remove(5);
   37|      1|  assert(!result);
   38|      1|  cout << skp << endl;
   39|      1|}
   40|       |
   41|       |/** Test. Creates a SkipList object s with 5 levels
   42|       |and 50 percent probability. Uses a for loop for randomly
   43|       |generate 40 numbers to enter into the skiplist. Displays
   44|       |the skiplist after each added value. */
   45|      1|void test2() {
   46|      1|  SkipList s(5);
   47|     41|   for (int i = 0; i < 40; ++i) {
   48|     40|    int number = rand() % 100;
   49|     40|    s.add(number);
   50|     40|    cout << "After adding " << number << endl;
   51|     40|    cout << s << endl;
   52|     40|  }
   53|      1|}
   54|       |
   55|       |/** Test. Creates a SkipList object s with 5 levels
   56|       |and 100 percent probability. Uses a for loop for randomly
   57|       |generate 20 numbers to enter into the skiplist. Displays
   58|       |he skiplist after each added value. This skiplist should
   59|       |add the same value at every depth level because of 100% 
   60|       |probability.*/
   61|      1|void test3() {
   62|      1|  SkipList s(5,100);
   63|     21|   for (int i = 0; i < 20; ++i) {
   64|     20|    int number = rand() % 100;
   65|     20|    s.add(number);
   66|     20|  }
   67|      1|  cout << s << endl;
   68|      1|}
   69|       |
   70|       |/** Test. Creates a SkipList object s with the default depth
   71|       |level and probability (1, 50). 20 numbers are randomly 
   72|       |generated. All values will be on a single level.*/
   73|      1|void test4() {
   74|      1|  SkipList s;
   75|     21|   for (int i = 0; i < 20; ++i) {
   76|     20|    int number = rand() % 100;
   77|     20|    s.add(number);
   78|     20|  }
   79|      1|  cout << s << endl;
   80|      1|}
   81|       |
   82|      1|int main() {
   83|      1|  test1();
   84|      1|  test2();
   85|      1|  test3();
   86|      1|  test4();
   87|      1|  cout << "Done." << endl;
   88|      1|  return 0;
   89|      1|}

/home/NETID/mikec87/C++/CSS342/ass4-skiplist/skiplist.cpp:
    1|       |/** Michael Cho 2/5/21
    2|       | * CSS342
    3|       | * 
    4|       | * This is the skiplist implementation file. It contains the methods
    5|       | * to construct a skiplist, as well as display, navigate, add, remove,
    6|       | * and connect nodes in the list. There are also a few various helper
    7|       | * methods.
    8|       | * */
    9|       |
   10|       |#include <cassert>
   11|       |#include <climits>
   12|       |#include <cstdlib>
   13|       |#include <iostream>
   14|       |#include "skiplist.h"
   15|       |
   16|       |using namespace std;
   17|       |
   18|       |/** Overloaded << operator prints out the SkipList at every level.
   19|       |Precondition: SkipList must be instantiated.
   20|       |Postcondition: Prints SkipList to the console.*/
   21|     44|ostream &operator<<(ostream &out, const SkipList &skip) {
   22|    260|  for (int i = skip.maxLevel - 1; i >= 0; i--) {
   23|    216|    out << "Level: " + to_string(i) + " -- ";
   24|    216|    SNode* curr = skip.frontGuard[i];
   25|  2.25k|    while(curr != nullptr) {
   26|  2.04k|      out << to_string(curr->value) + ", ";    
   27|  2.04k|      curr = curr->next;
   28|  2.04k|    }
   29|    216|    out << "\n";
   30|    216|  }
   31|     44|  return out;
   32|     44|}
   33|       |
   34|       |/** Constructor: Creates an SNode object with a specified value.
   35|       | * All pointers are set to nullptr.
   36|       |Precondition: None.
   37|       |Postcondition: Creates SNode obj with value. */
   38|       |SNode::SNode(int value) : value{value}, next{nullptr}, prev{nullptr}, 
   39|    236|up{nullptr}, down{nullptr} {}
   40|       |
   41|       |/** Constructor: Creates a SkipList object and creates array containers
   42|       |for the pointers. Sets the front and rear of each level array to 
   43|       |INT_MIN and INT_MAX and connects each pointer horizontally and
   44|       |vertically.
   45|       |Precondition: None.
   46|       |Postcondition: Creates specified level of arrays and connects "guards". */
   47|       |SkipList::SkipList(int maxLevel, int probability)
   48|      4|    : maxLevel{maxLevel}, probability{probability} {
   49|      4|  assert(maxLevel > 0 && probability >= 0 && probability <= 100);
   50|      4|
   51|      4|  // Creates an array of front and rear guards depending on the
   52|      4|  // specified depth level.
   53|      4|  frontGuard = new SNode *[maxLevel];
   54|      4|  rearGuard = new SNode *[maxLevel];
   55|      4|
   56|      4|  // Initializes each front and rear guard at each level with
   57|      4|  // INT_MAX and INT_MIN respectively. Then, connects the front
   58|      4|  // and rear.
   59|     20|  for(int i = 0; i < maxLevel; i++) {
   60|     16|    frontGuard[i] = new SNode(INT_MIN);
   61|     16|    rearGuard[i] = new SNode(INT_MAX);
   62|     16|    frontGuard[i]->next = rearGuard[i];
   63|     16|    rearGuard[i]->prev = frontGuard[i];
   64|     16|  }
   65|      4|
   66|      4|  // Connects each level vertically.
   67|     16|  for(int i = 0; i < maxLevel-1; i++) {
   68|     12|    frontGuard[i]->up = frontGuard[i+1];
   69|     12|    frontGuard[i+1]->down = frontGuard[i];
   70|     12|    rearGuard[i]->up = rearGuard[i+1];
   71|     12|    rearGuard[i+1]->down = rearGuard[i];
   72|     12|  }
   73|      4|}
   74|       |
   75|       |/** Destructor: Calls the clear method.
   76|       |Precondition: SkipList object must exist.
   77|       |Postcondition: Deletes the SkipList object with the clear method. */
   78|      4|SkipList::~SkipList() {
   79|      4|  clear();
   80|      4|}
   81|       |
   82|       |/** Clear: Deletes each dynamically created SNode in the SkipList
   83|       |object and sets each one to nullptr. Then, deletes the dynamically
   84|       |created frontGuard and rearGuard arrays.
   85|       |Precondition: SkipList object must exist.
   86|       |Postcondition: Deletes all SNodes, frontGuard, and rearGuard. */
   87|      4|void SkipList::clear() {
   88|      4|  SNode *curr;
   89|     20|  for(int i = maxLevel - 1; i >= 0; i--) {
   90|     16|    curr = frontGuard[i];
   91|    233|    while(curr->next != nullptr) {
   92|    217|      curr = curr->next;
   93|    217|      delete curr->prev;
   94|    217|      curr->prev = nullptr;
   95|    217|    }
   96|     16|    delete curr;
   97|     16|    curr = nullptr;
   98|     16|  }  
   99|      4|  delete[] frontGuard;
  100|      4|  delete[] rearGuard;
  101|      4|}
  102|       |
  103|       |/** Boolean to determine if value should be inserted at a higher level.
  104|       |Precondition: SkipList object must exist.
  105|       |Postcondition: Returns true if random number is less than probability.*/
  106|    204|bool SkipList::shouldInsertAtHigher() const {
  107|    204|  return rand() % 100 < probability;
  108|    204|}
  109|       |
  110|       |/** Boolean that calls the methods to check for duplicates and adds value
  111|       |at level 0 if value does not already exist.
  112|       |Precondition: SkipList object must exist.
  113|       |Postcondition: Returns true add is successful.*/
  114|     87|bool SkipList::add(int value) { 
  115|     87|  if(contains(value)) {
  116|      7|    return false;
  117|      7|  }
  118|     80|  int level = 0;
  119|     80|  addAtLevel(value, level);
  120|     80|  return true;
  121|     80|}
  122|       |
  123|       |/** Method that creates a new SNode with specified value and adds that SNode
  124|       |at a specified level. This method recursively calls itself to add at higher 
  125|       |levels if necessary.
  126|       |Precondition: SkipList object must exist.
  127|       |Postcondition: Adds a new node at the specified level. */
  128|    204|void SkipList::addAtLevel(int value, int level) {
  129|    204|  SNode *newNode = new SNode(value);
  130|    204|  SNode *curr = frontGuard[level];
  131|    204|
  132|    204|  // Traversing through the nodes at current level.
  133|  1.33k|  while(curr->value < value && curr->next != nullptr) {
  134|  1.13k|    curr = curr->next;
  135|  1.13k|  }
  136|    204|
  137|    204|  // When the correct position in the list is found, calls addBefore 
  138|    204|  // method to link nodes together.
  139|    204|  addBefore(curr, newNode);
  140|    204|  assert(newNode->next == curr && curr->prev == newNode);
  141|    204|  assert (newNode->prev != nullptr && newNode->prev->value < newNode->value);
  142|    204|  level++;
  143|    204|
  144|    204|    // Check whether to increase depth of skiplist.
  145|    204|    if(shouldInsertAtHigher() && level < maxLevel) {
  146|    124|      addAtLevel(value, level);
  147|    124|      connectLevels(newNode, level);
  148|    124|    }
  149|    204|}
  150|       |
  151|       |/** Method that links nodes in correct order horizontally when adding a new value.
  152|       |Precondition: SkipList object must exist.
  153|       |Postcondition: Inserts a node before the current node. */
  154|    204|void SkipList::addBefore(SNode *curr, SNode *newNode) {
  155|    204|  assert(newNode != nullptr && newNode->value < curr->value);
  156|    204|  newNode->prev = curr->prev;
  157|    204|  curr->prev->next = newNode;
  158|    204|  newNode->next = curr;
  159|    204|  curr->prev = newNode;   
  160|    204|}
  161|       |
  162|       |/** Method that connects levels vertically. Creates a node below the current level
  163|       |that finds the same value and connects the two levels.
  164|       |Precondition: SkipList object must exist. Value must exit on both levels.
  165|       |Postcondition: Connects node below with node above.*/
  166|    124|void SkipList::connectLevels(SNode *node, int level) {
  167|    124|  SNode *nodeBelow = frontGuard[level - 1];
  168|    771|  while(nodeBelow != nullptr) {
  169|    771|    if(nodeBelow->value == node->value) {
  170|    124|      nodeBelow->up = node;
  171|    124|      node->down = nodeBelow;
  172|    124|      break;
  173|    124|    }
  174|    647|    nodeBelow = nodeBelow->next;
  175|    647|  }
  176|    124|}
  177|       |
  178|       |/** Method that removes a single value throughout the skiplist. Uses the contains
  179|       |method to check whether the value exists in the list. Then, goes through each 
  180|       |level and deletes the node with the specified value data. Also, deletes the pointer
  181|       |and sets to nullptr.
  182|       |Precondition: SkipList object must exist.
  183|       |Postcondition: Returns true removed successfully.*/
  184|      2|bool SkipList::remove(int data) { 
  185|      2|  if(!contains(data)) {
  186|      1|    return false;
  187|      1|  }
  188|      1|  SNode *curr;
  189|      6|  for(int i = 0; i < maxLevel; i++) {
  190|      5|    curr = frontGuard[i];
  191|     17|    while(curr->next != nullptr) {
  192|     15|      curr = curr->next;
  193|     15|      if(curr->value == data) {
  194|      3|        curr->prev->next = curr->next;
  195|      3|        curr->next->prev = curr->prev;
  196|      3|        delete curr;
  197|      3|        break;
  198|      3|      }
  199|     15|    }
  200|      5|  }
  201|      1|  curr = nullptr;
  202|      1|return true; 
  203|      1|}
  204|       |
  205|       |/** Boolean method that checks whether a particular value exists within the list.
  206|       |Method searches throughout the list with the order of logN by going from highest
  207|       |level of the list down. 
  208|       |Precondition: SkipList object must exist.
  209|       |Postcondition: Returns true the value is found.*/
  210|     93|bool SkipList::contains(int data) const { 
  211|     93|  SNode *curr;
  212|    450|  for(int i = maxLevel - 1; i >=0; i--) {
  213|    366|    curr = frontGuard[i];
  214|  1.93k|    while(curr != nullptr && curr->value < data) {
  215|  1.57k|      curr = curr->next;
  216|  1.57k|      if(curr->value == data) {
  217|      9|        return true;
  218|      9|      }
  219|  1.57k|    }
  220|    366|  }
  221|     93|  return false; 
  222|     93|}

Fri Feb 19 19:10:56 PST 2021
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
