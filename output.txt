Fri Feb 19 21:15:12 PST 2021
Linux csslab6.uwb.edu 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
uid=1015102(mikec87) gid=2121015102(mikec87) groups=2121015102(mikec87),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
Level: 4 -- -2147483648, 2, 13, 2147483647, 
Level: 3 -- -2147483648, 2, 13, 33, 2147483647, 
Level: 2 -- -2147483648, 2, 5, 13, 33, 2147483647, 
Level: 1 -- -2147483648, 2, 3, 5, 13, 17, 33, 2147483647, 
Level: 0 -- -2147483648, 2, 3, 5, 9, 13, 17, 33, 2147483647, 

7 ? false
3 ? true
-100 ? false
100 ? false

Level: 4 -- -2147483648, 2, 13, 2147483647, 
Level: 3 -- -2147483648, 2, 13, 33, 2147483647, 
Level: 2 -- -2147483648, 2, 13, 33, 2147483647, 
Level: 1 -- -2147483648, 2, 3, 13, 17, 33, 2147483647, 
Level: 0 -- -2147483648, 2, 3, 9, 13, 17, 33, 2147483647, 

After adding 12
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 2147483647, 
Level: 1 -- -2147483648, 2147483647, 
Level: 0 -- -2147483648, 12, 2147483647, 

After adding 42
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 2147483647, 
Level: 1 -- -2147483648, 42, 2147483647, 
Level: 0 -- -2147483648, 12, 42, 2147483647, 

After adding 66
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 42, 66, 2147483647, 
Level: 0 -- -2147483648, 12, 42, 66, 2147483647, 

After adding 38
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 38, 42, 66, 2147483647, 
Level: 0 -- -2147483648, 12, 38, 42, 66, 2147483647, 

After adding 72
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 12, 38, 42, 66, 72, 2147483647, 

After adding 21
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 12, 21, 38, 42, 66, 72, 2147483647, 

After adding 25
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 25, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 12, 21, 25, 38, 42, 66, 72, 2147483647, 

After adding 3
Level: 3 -- -2147483648, 2147483647, 
Level: 2 -- -2147483648, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 3, 25, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 3, 12, 21, 25, 38, 42, 66, 72, 2147483647, 

After adding 1
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 66, 72, 2147483647, 

After adding 1
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 66, 72, 2147483647, 

After adding 59
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 59, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 59, 66, 72, 2147483647, 

After adding 54
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 59, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 54, 59, 66, 72, 2147483647, 

After adding 61
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 54, 59, 61, 66, 72, 2147483647, 

After adding 53
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 53, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 53, 54, 59, 61, 66, 72, 2147483647, 

After adding 91
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 25, 38, 42, 53, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 12, 21, 25, 38, 42, 53, 54, 59, 61, 66, 72, 91, 2147483647, 

After adding 10
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 25, 38, 42, 53, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 21, 25, 38, 42, 53, 54, 59, 61, 66, 72, 91, 2147483647, 

After adding 13
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 38, 42, 53, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 38, 42, 53, 54, 59, 61, 66, 72, 91, 2147483647, 

After adding 38
Level: 3 -- -2147483648, 1, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 38, 42, 53, 59, 61, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 38, 42, 53, 54, 59, 61, 66, 72, 91, 2147483647, 

After adding 62
Level: 3 -- -2147483648, 1, 62, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 62, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 38, 42, 53, 59, 61, 62, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 38, 42, 53, 54, 59, 61, 62, 66, 72, 91, 2147483647, 

After adding 42
Level: 3 -- -2147483648, 1, 62, 2147483647, 
Level: 2 -- -2147483648, 1, 42, 62, 66, 2147483647, 
Level: 1 -- -2147483648, 1, 3, 10, 13, 25, 38, 42, 53, 59, 61, 62, 66, 72, 2147483647, 
Level: 0 -- -2147483648, 1, 3, 10, 12, 13, 21, 25, 38, 42, 53, 54, 59, 61, 62, 66, 72, 91, 2147483647, 

Level: 4 -- -2147483648, 5, 8, 10, 18, 27, 31, 39, 46, 61, 66, 69, 70, 74, 79, 82, 88, 91, 94, 99, 2147483647, 
Level: 3 -- -2147483648, 5, 8, 10, 18, 27, 31, 39, 46, 61, 66, 69, 70, 74, 79, 82, 88, 91, 94, 99, 2147483647, 
Level: 2 -- -2147483648, 5, 8, 10, 18, 27, 31, 39, 46, 61, 66, 69, 70, 74, 79, 82, 88, 91, 94, 99, 2147483647, 
Level: 1 -- -2147483648, 5, 8, 10, 18, 27, 31, 39, 46, 61, 66, 69, 70, 74, 79, 82, 88, 91, 94, 99, 2147483647, 
Level: 0 -- -2147483648, 5, 8, 10, 18, 27, 31, 39, 46, 61, 66, 69, 70, 74, 79, 82, 88, 91, 94, 99, 2147483647, 

Level: 0 -- -2147483648, 8, 18, 25, 27, 33, 38, 43, 48, 53, 54, 60, 62, 65, 67, 71, 75, 84, 89, 97, 99, 2147483647, 

Done.
=====================================================
3. clang-tidy warnings are fixed
=====================================================
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./ass4.cpp
Running clang-format on ./skiplist.cpp
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==14961== Memcheck, a memory error detector
==14961== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==14961== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==14961== Command: ./a.out
==14961== Parent PID: 14890
==14961== 
==14961== 
==14961== HEAP SUMMARY:
==14961==     in use at exit: 0 bytes in 0 blocks
==14961==   total heap usage: 212 allocs, 212 frees, 81,064 bytes allocated
==14961== 
==14961== All heap blocks were freed -- no leaks are possible
==14961== 
==14961== For lists of detected and suppressed errors, rerun with: -s
==14961== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/mikec87/C++/CSS342/ass4-skiplist/ass4.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------
test1()                           1       0 100.00%        24       0 100.00%
test2()                           4       0 100.00%         9       0 100.00%
test3()                           4       0 100.00%         8       0 100.00%
test4()                           4       0 100.00%         8       0 100.00%
main                              1       0 100.00%         8       0 100.00%
-----------------------------------------------------------------------------
TOTAL                            14       0 100.00%        57       0 100.00%

File '/home/NETID/mikec87/C++/CSS342/ass4-skiplist/skiplist.cpp':
Name                                         Regions    Miss   Cover     Lines    Miss   Cover
----------------------------------------------------------------------------------------------
operator<<(std::ostream&, SkipList const&)         6       0 100.00%        12       0 100.00%
SNode::SNode(int)                                  1       0 100.00%         1       0 100.00%
SkipList::SkipList(int, int)                       7       0 100.00%        26       0 100.00%
SkipList::~SkipList()                              1       0 100.00%         1       0 100.00%
SkipList::clear()                                  6       0 100.00%        15       0 100.00%
SkipList::shouldInsertAtHigher() const             1       0 100.00%         3       0 100.00%
SkipList::add(int)                                 4       0 100.00%         8       0 100.00%
SkipList::addAtLevel(int, int)                     9       0 100.00%        22       0 100.00%
SkipList::addBefore(SNode*, SNode*)                1       0 100.00%         7       0 100.00%
SkipList::connectLevels(SNode*, int)               6       0 100.00%        11       0 100.00%
SkipList::remove(int)                             11       0 100.00%        20       0 100.00%
SkipList::contains(int) const                     11       0 100.00%        13       0 100.00%
----------------------------------------------------------------------------------------------
TOTAL                                             64       0 100.00%       139       0 100.00%
/home/NETID/mikec87/C++/CSS342/ass4-skiplist/ass4.cpp:
    1|       |/** Michael Cho 2/19/21
    2|       | * CSS342
    3|       | *
    4|       | * This is the main driver file. It is running assertion tests.
    5|       | * */
    6|       |
    7|       |#include "skiplist.h"
    8|       |#include <cassert>
    9|       |#include <iostream>
   10|       |
   11|       |using namespace std;
   12|       |
   13|       |/** Test. Creates a SkipList object skp with 5 levels
   14|       |and 80 percent probability. Adds various values into
   15|       |the skiplist and checks the contains and remove methods. */
   16|      1|void test1() {
   17|      1|  srand(10000);
   18|      1|  SkipList skp(5, 80);
   19|      1|  cout << boolalpha;
   20|      1|  skp.add(3);
   21|      1|  skp.add(5);
   22|      1|  skp.add(9);
   23|      1|  skp.add(17);
   24|      1|  skp.add(13);
   25|      1|  skp.add(33);
   26|      1|  skp.add(2);
   27|      1|  cout << skp << endl;
   28|      1|  assert(skp.contains(2));
   29|      1|  assert(!skp.contains(300));
   30|      1|  cout << "7 ? " << skp.contains(7) << endl;
   31|      1|  cout << "3 ? " << skp.contains(3) << endl;
   32|      1|  cout << "-100 ? " << skp.contains(-100) << endl;
   33|      1|  cout << "100 ? " << skp.contains(100) << endl << endl;
   34|      1|  bool result = skp.remove(5);
   35|      1|  assert(result);
   36|      1|  result = skp.remove(5);
   37|      1|  assert(!result);
   38|      1|  cout << skp << endl;
   39|      1|}
   40|       |
   41|       |/** Test. Creates a SkipList object s with 4 levels
   42|       |and 50 percent probability. Uses a for loop for randomly
   43|       |generate 40 numbers to enter into the skiplist. Displays
   44|       |the skiplist after each added value. */
   45|      1|void test2() {
   46|      1|  SkipList s(4);
   47|     21|  for (int i = 0; i < 20; ++i) {
   48|     20|    int number = rand() % 100;
   49|     20|    s.add(number);
   50|     20|    cout << "After adding " << number << endl;
   51|     20|    cout << s << endl;
   52|     20|  }
   53|      1|}
   54|       |
   55|       |/** Test. Creates a SkipList object s with 5 levels
   56|       |and 100 percent probability. Uses a for loop for randomly
   57|       |generate 20 numbers to enter into the skiplist. Displays
   58|       |he skiplist after each added value. This skiplist should
   59|       |add the same value at every depth level because of 100%
   60|       |probability.*/
   61|      1|void test3() {
   62|      1|  SkipList s(5, 100);
   63|     21|  for (int i = 0; i < 20; ++i) {
   64|     20|    int number = rand() % 100;
   65|     20|    s.add(number);
   66|     20|  }
   67|      1|  cout << s << endl;
   68|      1|}
   69|       |
   70|       |/** Test. Creates a SkipList object s with the default depth
   71|       |level and probability (1, 50). 20 numbers are randomly
   72|       |generated. All values will be on a single level.*/
   73|      1|void test4() {
   74|      1|  SkipList s;
   75|     21|  for (int i = 0; i < 20; ++i) {
   76|     20|    int number = rand() % 100;
   77|     20|    s.add(number);
   78|     20|  }
   79|      1|  cout << s << endl;
   80|      1|}
   81|       |
   82|      1|int main() {
   83|      1|  test1();
   84|      1|  test2();
   85|      1|  test3();
   86|      1|  test4();
   87|      1|  cout << "Done." << endl;
   88|      1|  return 0;
   89|      1|}

/home/NETID/mikec87/C++/CSS342/ass4-skiplist/skiplist.cpp:
    1|       |/** Michael Cho 2/19/21
    2|       | * CSS342
    3|       | *
    4|       | * This is the skiplist implementation file. It contains the methods
    5|       | * to construct a skiplist, as well as display, navigate, add, remove,
    6|       | * and connect nodes in the list. There are also a few various helper
    7|       | * methods.
    8|       | * */
    9|       |
   10|       |#include "skiplist.h"
   11|       |#include <cassert>
   12|       |#include <climits>
   13|       |#include <cstdlib>
   14|       |#include <iostream>
   15|       |
   16|       |using namespace std;
   17|       |
   18|       |/** Overloaded << operator prints out the SkipList at every level.
   19|       |Precondition: SkipList must be instantiated.
   20|       |Postcondition: Prints SkipList to the console.*/
   21|     24|ostream &operator<<(ostream &out, const SkipList &skip) {
   22|    120|  for (int i = skip.maxLevel - 1; i >= 0; i--) {
   23|     96|    out << "Level: " + to_string(i) + " -- ";
   24|     96|    SNode *curr = skip.frontGuard[i];
   25|    849|    while (curr != nullptr) {
   26|    753|      out << to_string(curr->value) + ", ";
   27|    753|      curr = curr->next;
   28|    753|    }
   29|     96|    out << "\n";
   30|     96|  }
   31|     24|  return out;
   32|     24|}
   33|       |
   34|       |/** Constructor: Creates an SNode object with a specified value.
   35|       |All pointers are set to nullptr.
   36|       |Precondition: None.
   37|       |Postcondition: Creates SNode obj with value. */
   38|       |SNode::SNode(int value)
   39|    203|    : value{value}, next{nullptr}, prev{nullptr}, up{nullptr}, down{nullptr} {}
   40|       |
   41|       |/** Constructor: Creates a SkipList object and creates array containers
   42|       |for the pointers. Sets the front and rear of each level array to
   43|       |INT_MIN and INT_MAX and connects each pointer horizontally and vertically.
   44|       |Precondition: None.
   45|       |Postcondition: Creates specified level of arrays and connects "guards". */
   46|       |SkipList::SkipList(int maxLevel, int probability)
   47|      4|    : maxLevel{maxLevel}, probability{probability} {
   48|      4|  assert(maxLevel > 0 && probability >= 0 && probability <= 100);
   49|      4|
   50|      4|  // Creates an array of front and rear guards depending on the
   51|      4|  // specified depth level.
   52|      4|  frontGuard = new SNode *[maxLevel];
   53|      4|  rearGuard = new SNode *[maxLevel];
   54|      4|
   55|      4|  // Initializes each front and rear guard at each level with
   56|      4|  // INT_MAX and INT_MIN respectively. Then, connects the front
   57|      4|  // and rear.
   58|     19|  for (int i = 0; i < maxLevel; i++) {
   59|     15|    frontGuard[i] = new SNode(INT_MIN);
   60|     15|    rearGuard[i] = new SNode(INT_MAX);
   61|     15|    frontGuard[i]->next = rearGuard[i];
   62|     15|    rearGuard[i]->prev = frontGuard[i];
   63|     15|  }
   64|      4|
   65|      4|  // Connects each level vertically.
   66|     15|  for (int i = 0; i < maxLevel - 1; i++) {
   67|     11|    frontGuard[i]->up = frontGuard[i + 1];
   68|     11|    frontGuard[i + 1]->down = frontGuard[i];
   69|     11|    rearGuard[i]->up = rearGuard[i + 1];
   70|     11|    rearGuard[i + 1]->down = rearGuard[i];
   71|     11|  }
   72|      4|}
   73|       |
   74|       |/** Destructor: Calls the clear method.
   75|       |Precondition: SkipList object must exist.
   76|       |Postcondition: Deletes the SkipList object with the clear method. */
   77|      4|SkipList::~SkipList() { clear(); }
   78|       |
   79|       |/** Clear: Deletes each dynamically created SNode in the SkipList
   80|       |object and sets each one to nullptr. Then, deletes the dynamically
   81|       |created frontGuard and rearGuard arrays.
   82|       |Precondition: SkipList object must exist.
   83|       |Postcondition: Deletes all SNodes, frontGuard, and rearGuard. */
   84|      4|void SkipList::clear() {
   85|      4|  SNode *curr;
   86|     19|  for (int i = maxLevel - 1; i >= 0; i--) {
   87|     15|    curr = frontGuard[i];
   88|    200|    while (curr->next != nullptr) {
   89|    185|      curr = curr->next;
   90|    185|      delete curr->prev;
   91|    185|      curr->prev = nullptr;
   92|    185|    }
   93|     15|    delete curr;
   94|     15|    curr = nullptr;
   95|     15|  }
   96|      4|  delete[] frontGuard;
   97|      4|  delete[] rearGuard;
   98|      4|}
   99|       |
  100|       |/** Boolean to determine if value should be inserted at a higher level.
  101|       |Precondition: SkipList object must exist.
  102|       |Postcondition: Returns true if random number is less than probability.*/
  103|    173|bool SkipList::shouldInsertAtHigher() const {
  104|    173|  return rand() % 100 < probability;
  105|    173|}
  106|       |
  107|       |/** Boolean that calls the methods to check for duplicates and adds value
  108|       |at level 0 if value does not already exist.
  109|       |Precondition: SkipList object must exist.
  110|       |Postcondition: Returns true add is successful.*/
  111|     67|bool SkipList::add(int value) {
  112|     67|  if (contains(value)) {
  113|      4|    return false;
  114|      4|  }
  115|     63|  int level = 0;
  116|     63|  addAtLevel(value, level);
  117|     63|  return true;
  118|     63|}
  119|       |
  120|       |/** Method that creates a new SNode with specified value and adds that SNode
  121|       |at a specified level. This method recursively calls itself to add at higher
  122|       |levels if necessary.
  123|       |Precondition: SkipList object must exist.
  124|       |Postcondition: Adds a new node at the specified level. */
  125|    173|void SkipList::addAtLevel(int value, int level) {
  126|    173|  SNode *newNode = new SNode(value);
  127|    173|  SNode *curr = frontGuard[level];
  128|    173|
  129|    173|  // Traversing through the nodes at current level.
  130|  1.06k|  while (curr->value < value && curr->next != nullptr) {
  131|    894|    curr = curr->next;
  132|    894|  }
  133|    173|
  134|    173|  // When the correct position in the list is found, calls addBefore
  135|    173|  // method to link nodes together.
  136|    173|  addBefore(curr, newNode);
  137|    173|  assert(newNode->next == curr && curr->prev == newNode);
  138|    173|  assert(newNode->prev != nullptr && newNode->prev->value < newNode->value);
  139|    173|  level++;
  140|    173|
  141|    173|  // Check whether to increase depth of skiplist.
  142|    173|  if (shouldInsertAtHigher() && level < maxLevel) {
  143|    110|    addAtLevel(value, level);
  144|    110|    connectLevels(newNode, level);
  145|    110|  }
  146|    173|}
  147|       |
  148|       |/** Method that links nodes in correct order horizontally when adding a new
  149|       |value. Precondition: SkipList object must exist. Postcondition: Inserts a node
  150|       |before the current node. */
  151|    173|void SkipList::addBefore(SNode *curr, SNode *newNode) {
  152|    173|  assert(newNode != nullptr && newNode->value < curr->value);
  153|    173|  newNode->prev = curr->prev;
  154|    173|  curr->prev->next = newNode;
  155|    173|  newNode->next = curr;
  156|    173|  curr->prev = newNode;
  157|    173|}
  158|       |
  159|       |/** Method that connects levels vertically. Creates a node below the current
  160|       |level that finds the same value and connects the two levels. Precondition:
  161|       |SkipList object must exist. Value must exit on both levels. Postcondition:
  162|       |Connects node below with node above.*/
  163|    110|void SkipList::connectLevels(SNode *node, int level) {
  164|    110|  SNode *nodeBelow = frontGuard[level - 1];
  165|    707|  while (nodeBelow != nullptr) {
  166|    707|    if (nodeBelow->value == node->value) {
  167|    110|      nodeBelow->up = node;
  168|    110|      node->down = nodeBelow;
  169|    110|      break;
  170|    110|    }
  171|    597|    nodeBelow = nodeBelow->next;
  172|    597|  }
  173|    110|}
  174|       |
  175|       |/** Method that removes a single value throughout the skiplist. Uses the
  176|       |contains method to check whether the value exists in the list. Then, goes
  177|       |through each level and deletes the node with the specified value data. Also,
  178|       |deletes the pointer and sets to nullptr. Precondition: SkipList object must
  179|       |exist. Postcondition: Returns true removed successfully.*/
  180|      2|bool SkipList::remove(int data) {
  181|      2|  if (!contains(data)) {
  182|      1|    return false;
  183|      1|  }
  184|      1|  SNode *curr;
  185|      6|  for (int i = 0; i < maxLevel; i++) {
  186|      5|    curr = frontGuard[i];
  187|     17|    while (curr->next != nullptr) {
  188|     15|      curr = curr->next;
  189|     15|      if (curr->value == data) {
  190|      3|        curr->prev->next = curr->next;
  191|      3|        curr->next->prev = curr->prev;
  192|      3|        delete curr;
  193|      3|        break;
  194|      3|      }
  195|     15|    }
  196|      5|  }
  197|      1|  curr = nullptr;
  198|      1|  return true;
  199|      1|}
  200|       |
  201|       |/** Boolean method that checks whether a particular value exists within the
  202|       |list. Method searches throughout the list with the order of logN by going from
  203|       |highest level of the list down. Precondition: SkipList object must exist.
  204|       |Postcondition: Returns true the value is found.*/
  205|     75|bool SkipList::contains(int data) const {
  206|     75|  SNode *curr;
  207|    326|  for (int i = maxLevel - 1; i >= 0; i--) {
  208|    258|    curr = frontGuard[i];
  209|  1.35k|    while (curr != nullptr && curr->value < data) {
  210|  1.09k|      curr = curr->next;
  211|  1.09k|      if (curr->value == data) {
  212|      7|        return true;
  213|      7|      }
  214|  1.09k|    }
  215|    258|  }
  216|     75|  return false;
  217|     75|}

Fri Feb 19 21:15:20 PST 2021
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
